server.port = 8080
spring.profiles.active=dev

#startup settings
watch.startup.persistent = true
watch.startup.processingTimer = 10
watch.startup.turnTimer = 10
watch.startup.continentalshiftTimer = 240
watch.startup.saveTimer = 600
watch.startup.prefix = unit_test_

# world generation settings
watch.worldsettings.xSize = 30
watch.worldsettings.ySize = 30
watch.worldsettings.numberOfContinents = 6
watch.worldsettings.lifePresSeeded = true
watch.worldsettings.coastalZone = 1
watch.worldsettings.oceanicZone = 3

#continental drift variables
watch.continentalshift.driftVelocity = 1
watch.continentalshift.driftFlux = 1
watch.continentalshift.heightdivider = 2
watch.continentalshift.minContinents = 8
watch.continentalshift.continentalToOcceanicRatio = 2
watch.continentalshift.continentalContinentWeight = 3

# erosion settings
watch.erosion.minHeightDifference = 1000
watch.erosion.max = 1000

# World height definitions
watch.oceanHeight = 1000
watch.seaHeight = 2000
watch.coastalHeight =3000
watch.plainsHeight = 4000
watch.hillHeight = 5000
watch.mountainHeight = 6000

#Logging
logging.level.root=INFO

# Datasource / Spring JDBC
using.spring.schedulerFactory=true

#QUARTZ
spring.quartz.job-store-type=jdbc
# Always create the Quartz database on startup
spring.quartz.jdbc.initialize-schema=always
spring.datasource.jdbc-url=jdbc:h2:mem:localmemmory;DB_CLOSE_DELAY=-1

#Datasources
spring.main.allow-bean-definition-overriding=true

#In memory datasource
spring.datasource.username=inmemory
spring.datasource.password=inmemory
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:localmemmory;DB_CLOSE_DELAY=-1
spring.h2.console.enabled=true
spring.h2.console.path=/h2

spring.mvc.pathmatch.matching-strategy=AntPathMatcher

#Flyway
flyway.user=${spring.datasource.username}
flyway.password=${spring.datasource.password}
#flyway.schemas=public
flyway.url=${spring.datasource.url}
#flyway.locations=db/migration

#hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactorym

# Hibernate properties
spring.jpa.hibernate.event.merge.entity_copy_observer = allow
# TODO: spring.jpa.hibernate.ddl-auto on verify. Using create/update seems to be a security risk.
# spring.jpa.hibernate.ddl-auto: update => normal use || create => reload fresh database
spring.jpa.properties.hibernate.ddl-auto = create
spring.jpa.properties.hibernate.jdbc.batch_size = 500
spring.jpa.properties.hibernate.order_inserts = true
spring.jpa.properties.hibernate.order_updates = true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data = false
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.persistent.database-platform=org.hibernate.dialect.H2Dialect



spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.properties.hibernate.generate_statistics=false
spring.jpa.properties.hibernate.id.new_generator_mappings=true
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.globally_quoted_identifiers=true
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.type=trace
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl